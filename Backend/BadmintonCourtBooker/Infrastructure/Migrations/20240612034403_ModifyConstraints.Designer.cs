// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240612034403_ModifyConstraints")]
    partial class ModifyConstraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BookingMethodId")
                        .HasColumnType("int");

                    b.Property<bool>("CheckIn")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingMethodId");

                    b.HasIndex("CourtId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SlotId");

                    b.HasIndex("TransactionDetailId")
                        .IsUnique()
                        .HasFilter("[TransactionDetailId] IS NOT NULL");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MethodType")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerSlot")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)");

                    b.Property<decimal>("TimePerSlot")
                        .HasPrecision(7, 1)
                        .HasColumnType("decimal(7,1)");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("BookingMethods");
                });

            modelBuilder.Entity("Domain.Entities.Court", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CourtStatus")
                        .HasColumnType("int");

                    b.Property<int>("CourtType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<TimeSpan>("SlotDuration")
                        .HasColumnType("time");

                    b.Property<int>("SlotType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Court", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("CourtEmployee", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MethodType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("CourtPaymentMethod", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CourtId", "DayOfWeek")
                        .IsUnique();

                    b.ToTable("CourtSchedule", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleSlot", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Account")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)");

                    b.Property<decimal>("TotalBookingTime")
                        .HasPrecision(7, 1)
                        .HasColumnType("decimal(7,1)");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)");

                    b.Property<decimal>("BookingTime")
                        .HasPrecision(7, 1)
                        .HasColumnType("decimal(7,1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BookingTime")
                        .HasPrecision(7, 1)
                        .HasColumnType("decimal(7,1)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bacf040f-4744-4bb7-9689-bc5f846223c1"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 1, 571, DateTimeKind.Utc).AddTicks(7377),
                            Email = "systemadmin@gmail.com",
                            FirstName = "Admin",
                            LastName = "System",
                            PasswordHash = "$2a$11$xsLLOceMsGWCPG6Jgbr1Jud7ZWSYff4uIzHWScbYMGjmLkSeKvTN.",
                            PhoneNumber = "0123456789",
                            Role = 4,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("0b178799-a492-41ac-9d9a-c2a2dafe7dc6"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 1, 699, DateTimeKind.Utc).AddTicks(6399),
                            Email = "manager1@gmail.com",
                            FirstName = "Manager 1",
                            LastName = "Court",
                            PasswordHash = "$2a$11$.5ch/rIirwEIiI3WPEwoBOk0S.3l2c.j/RQF7hszDBjXzqe0zqvEC",
                            PhoneNumber = "0123456781",
                            Role = 3,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("1a030c5f-4067-4c83-a985-98608f0d7c4f"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 1, 825, DateTimeKind.Utc).AddTicks(9093),
                            Email = "manager2@gmail.com",
                            FirstName = "Manager 2",
                            LastName = "Court",
                            PasswordHash = "$2a$11$k9d2hq.A284.1OVYUhyYxuOqLs0KzkncmClqtbrYdggnKw3LuNEtm",
                            PhoneNumber = "0123456782",
                            Role = 3,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("30492f01-99d2-4fe6-8a30-884193bb9135"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 1, 951, DateTimeKind.Utc).AddTicks(7550),
                            Email = "manager3@gmail.com",
                            FirstName = "Manager 3",
                            LastName = "Court",
                            PasswordHash = "$2a$11$BN5XoMxElPAHMIRHZFB/QOen5KF27mQd9TmYN0B7vimFqZ0CAev4O",
                            PhoneNumber = "0123456783",
                            Role = 3,
                            Status = 3
                        },
                        new
                        {
                            Id = new Guid("b5546fb7-6972-4677-a5a3-a7599d294b1e"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 2, 79, DateTimeKind.Utc).AddTicks(4260),
                            Email = "customer1@gmail.com",
                            FirstName = "Customer 1",
                            LastName = "Application",
                            PasswordHash = "$2a$11$5oW6/WdlUi0kKwq.MwLhmOxY5gcpFknB5f3aKr3QppA4QCjRNLVxu",
                            PhoneNumber = "0123456701",
                            Role = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("0ddd584f-ce6d-48d8-b55c-edbdb75d9a88"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 2, 205, DateTimeKind.Utc).AddTicks(3264),
                            Email = "customer2@gmail.com",
                            FirstName = "Customer 2",
                            LastName = "Application",
                            PasswordHash = "$2a$11$ZEohmPZJJcnu9fLl9QUC0eWmDjtLcP2trzJwqPRP5J911KymN8F1e",
                            PhoneNumber = "0123456702",
                            Role = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("159aced1-f67a-4c34-be93-3e0009dd6419"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 2, 330, DateTimeKind.Utc).AddTicks(9180),
                            Email = "customer3@gmail.com",
                            FirstName = "Customer 3",
                            LastName = "Application",
                            PasswordHash = "$2a$11$T8851XFlpsAnq7BlxtrS5OG4jT393Y4LLW/7CjQVzd.31lpcVX6ny",
                            PhoneNumber = "0123456703",
                            Role = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("577d0faa-61f2-4ea6-b7f6-fcc33b94dc2e"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 2, 454, DateTimeKind.Utc).AddTicks(1179),
                            Email = "customer4@gmail.com",
                            FirstName = "Customer 4",
                            LastName = "Application",
                            PasswordHash = "$2a$11$acCdPdU2BSW.irR89llpS.vrC8Ur9kvIlu7P7PNdpDLTR4ddVmZKC",
                            PhoneNumber = "0123456704",
                            Role = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("92856ff8-947d-4e46-87d2-13277a87c0da"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 2, 577, DateTimeKind.Utc).AddTicks(7857),
                            Email = "customer5@gmail.com",
                            FirstName = "Customer 5",
                            LastName = "Application",
                            PasswordHash = "$2a$11$CCpidkOJDq6KA01iu5Yu2O8ErqABLGxonHZigeTLvV1gRadbDwK6O",
                            PhoneNumber = "0123456705",
                            Role = 1,
                            Status = 3
                        },
                        new
                        {
                            Id = new Guid("2936edbc-9bad-4549-a3e4-2bfa444feb54"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 2, 700, DateTimeKind.Utc).AddTicks(574),
                            Email = "staff1@gmail.com",
                            FirstName = "Staff 1",
                            LastName = "Court",
                            PasswordHash = "$2a$11$UZuuuRW1tMTyLbplV44ZGOO6euUhUyS0IIp/xn7UCPwHAq7mFPyju",
                            PhoneNumber = "0123456711",
                            Role = 2,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("012af60d-02b0-4053-be69-bf6264691597"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 2, 823, DateTimeKind.Utc).AddTicks(3354),
                            Email = "staff2@gmail.com",
                            FirstName = "Staff 2",
                            LastName = "Court",
                            PasswordHash = "$2a$11$Atd8QY.p.bE6zf5NGgoZQuFmy.MTLS/qXQrkxEwqhYByyNA0y3Q9m",
                            PhoneNumber = "0123456712",
                            Role = 2,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("f0123f28-7d8e-4d44-8358-284ac82f17a9"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 6, 12, 3, 44, 2, 946, DateTimeKind.Utc).AddTicks(6666),
                            Email = "staff3@gmail.com",
                            FirstName = "Staff 3",
                            LastName = "Court",
                            PasswordHash = "$2a$11$kM82CZQczJ8zyxrHdAj/gu.piS6crflc7aoe.KGoL4V.B7Y.VU9Wa",
                            PhoneNumber = "0123456713",
                            Role = 2,
                            Status = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.BookingMethod", "BookingMethod")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingMethodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("Bookings")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.User", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.TransactionDetail", "TransactionDetail")
                        .WithOne("Booking")
                        .HasForeignKey("Domain.Entities.Booking", "TransactionDetailId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BookingMethod");

                    b.Navigation("Court");

                    b.Navigation("Customer");

                    b.Navigation("Slot");

                    b.Navigation("TransactionDetail");
                });

            modelBuilder.Entity("Domain.Entities.BookingMethod", b =>
                {
                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("BookingMethods")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");
                });

            modelBuilder.Entity("Domain.Entities.Court", b =>
                {
                    b.HasOne("Domain.Entities.User", "Creator")
                        .WithMany("CreatedCourts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("Employees")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Court");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("Schedules")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");
                });

            modelBuilder.Entity("Domain.Entities.Slot", b =>
                {
                    b.HasOne("Domain.Entities.Schedule", "Schedule")
                        .WithMany("Slots")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.User", "Creator")
                        .WithMany("Transactions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.TransactionDetail", b =>
                {
                    b.HasOne("Domain.Entities.Transaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Domain.Entities.BookingMethod", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.Court", b =>
                {
                    b.Navigation("BookingMethods");

                    b.Navigation("Bookings");

                    b.Navigation("Employees");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Domain.Entities.TransactionDetail", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CreatedCourts");

                    b.Navigation("Employees");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
