// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240701130229_UpdateEntityCourt")]
    partial class UpdateEntityCourt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BookingMethodId")
                        .HasColumnType("int");

                    b.Property<bool>("CheckIn")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingMethodId");

                    b.HasIndex("CourtId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SlotId");

                    b.HasIndex("TransactionDetailId")
                        .IsUnique()
                        .HasFilter("[TransactionDetailId] IS NOT NULL");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MethodType")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerSlot")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TimePerSlot")
                        .HasPrecision(7, 1)
                        .HasColumnType("decimal(7,1)");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("BookingMethods");
                });

            modelBuilder.Entity("Domain.Entities.Court", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CourtStatus")
                        .HasColumnType("int");

                    b.Property<int>("CourtType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<TimeSpan>("SlotDuration")
                        .HasColumnType("time");

                    b.Property<int>("SlotType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Court", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CourtId", "UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("CourtEmployee", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MethodType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("CourtPaymentMethod", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CourtId", "DayOfWeek")
                        .IsUnique();

                    b.ToTable("CourtSchedule", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleSlot", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Account")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)");

                    b.Property<decimal>("TotalBookingTime")
                        .HasPrecision(7, 1)
                        .HasColumnType("decimal(7,1)");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)");

                    b.Property<decimal>("BookingTime")
                        .HasPrecision(7, 1)
                        .HasColumnType("decimal(7,1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BookingTime")
                        .HasPrecision(7, 1)
                        .HasColumnType("decimal(7,1)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("17327a7d-3548-49a8-a23e-991a9735784c"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 27, 870, DateTimeKind.Utc).AddTicks(3927),
                            Email = "systemadmin@gmail.com",
                            FirstName = "Admin",
                            LastName = "System",
                            PasswordHash = "$2a$11$WFDRej.nZ0qe76J/SAOfG.o8pJfHRyK0BkXjGSTPqWIWMmze5fVCe",
                            PhoneNumber = "0123456789",
                            Role = 4,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("db0a1cf5-e247-457c-b84b-cee95dd1ab1b"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 27, 997, DateTimeKind.Utc).AddTicks(4287),
                            Email = "manager1@gmail.com",
                            FirstName = "Manager 1",
                            LastName = "Court",
                            PasswordHash = "$2a$11$ho.lsTek7FGAJpSYqaRfpeIxsXzik2PfhRxSt5AmmbzhD0Sj6g4T.",
                            PhoneNumber = "0123456781",
                            Role = 3,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("85d513a0-237e-427b-a85a-8e2b6ea2ccc8"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 28, 128, DateTimeKind.Utc).AddTicks(9291),
                            Email = "manager2@gmail.com",
                            FirstName = "Manager 2",
                            LastName = "Court",
                            PasswordHash = "$2a$11$O36qHz4B5cX22aHxpeMIXuip3CGfTJne4gJ3LBN6AOu2fCFIpgXEa",
                            PhoneNumber = "0123456782",
                            Role = 3,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("60aaf842-9a5d-4b40-a249-9d141e86903f"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 28, 255, DateTimeKind.Utc).AddTicks(8156),
                            Email = "manager3@gmail.com",
                            FirstName = "Manager 3",
                            LastName = "Court",
                            PasswordHash = "$2a$11$9GrmVp3GCxVaE3KQa/IENuof44Vz04s42a/GkaMe/1XK/h4iCrX7.",
                            PhoneNumber = "0123456783",
                            Role = 3,
                            Status = 3
                        },
                        new
                        {
                            Id = new Guid("d8460477-60c5-4f3e-9034-1e2b8db6075b"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 28, 383, DateTimeKind.Utc).AddTicks(2407),
                            Email = "customer1@gmail.com",
                            FirstName = "Customer 1",
                            LastName = "Application",
                            PasswordHash = "$2a$11$O3GuOsDzRs18VHwIYvatB.0rclEVHY/7asrnU1mCu.RwD3PG3395W",
                            PhoneNumber = "0123456701",
                            Role = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("db1cfe23-7e71-4198-8f3e-c7facf5e70e5"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 28, 507, DateTimeKind.Utc).AddTicks(9776),
                            Email = "customer2@gmail.com",
                            FirstName = "Customer 2",
                            LastName = "Application",
                            PasswordHash = "$2a$11$v7rg1j6zlbYF1uEIgH4ILeeAKIgg6x.MQKfOwVM1tWDY9rJAr6Isq",
                            PhoneNumber = "0123456702",
                            Role = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("4c1e1cd7-5bfc-46d7-8e28-b3d76da615f3"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 28, 631, DateTimeKind.Utc).AddTicks(6919),
                            Email = "customer3@gmail.com",
                            FirstName = "Customer 3",
                            LastName = "Application",
                            PasswordHash = "$2a$11$NMefz0EIQW0wI0m1ELK7v.N/H5cnYsVsEClMaepVOnHfM4a0xc7V6",
                            PhoneNumber = "0123456703",
                            Role = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("1a49e9da-205a-40c0-ac81-a49dd3efedd8"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 28, 756, DateTimeKind.Utc).AddTicks(1502),
                            Email = "customer4@gmail.com",
                            FirstName = "Customer 4",
                            LastName = "Application",
                            PasswordHash = "$2a$11$h2GShZc2cwutHLCuqHd.0.GE5EBvhlnapRs7QGtL9B5RlJaVJbJBO",
                            PhoneNumber = "0123456704",
                            Role = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ccf0c477-6d32-48bf-be34-3e93410c656a"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 28, 880, DateTimeKind.Utc).AddTicks(4166),
                            Email = "customer5@gmail.com",
                            FirstName = "Customer 5",
                            LastName = "Application",
                            PasswordHash = "$2a$11$W6eirp7tw3oH6OIpRGtfNuHegKIDo3crEMC6aFt8619reFnINtw9u",
                            PhoneNumber = "0123456705",
                            Role = 1,
                            Status = 3
                        },
                        new
                        {
                            Id = new Guid("b090d6bb-5bd4-45fe-a4f3-9d96fdf44f0b"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 29, 9, DateTimeKind.Utc).AddTicks(5974),
                            Email = "staff1@gmail.com",
                            FirstName = "Staff 1",
                            LastName = "Court",
                            PasswordHash = "$2a$11$esdcKBye8uMj0UohFqlieODA4rmxUqYs1o4SrgFla6/4RVOM9/P9y",
                            PhoneNumber = "0123456711",
                            Role = 2,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("1f941352-038f-47c9-9341-f4be88164241"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 29, 134, DateTimeKind.Utc).AddTicks(9598),
                            Email = "staff2@gmail.com",
                            FirstName = "Staff 2",
                            LastName = "Court",
                            PasswordHash = "$2a$11$AloQhZVPqOj7RuSuWgAspOrk3H/DFVkXYW10U7VRZslfV1wes4mlK",
                            PhoneNumber = "0123456712",
                            Role = 2,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("4cdf2092-7c95-4b16-83f1-cfd5cb75a7d3"),
                            BookingTime = 0m,
                            CreatedDate = new DateTime(2024, 7, 1, 13, 2, 29, 263, DateTimeKind.Utc).AddTicks(4187),
                            Email = "staff3@gmail.com",
                            FirstName = "Staff 3",
                            LastName = "Court",
                            PasswordHash = "$2a$11$6mtn5x599mMXPzWBxHKvWu7R.MUt3gJcJuCFzWcGsWZyxCbdmcNWm",
                            PhoneNumber = "0123456713",
                            Role = 2,
                            Status = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.BookingMethod", "BookingMethod")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingMethodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("Bookings")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.User", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.TransactionDetail", "TransactionDetail")
                        .WithOne("Booking")
                        .HasForeignKey("Domain.Entities.Booking", "TransactionDetailId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BookingMethod");

                    b.Navigation("Court");

                    b.Navigation("Customer");

                    b.Navigation("Slot");

                    b.Navigation("TransactionDetail");
                });

            modelBuilder.Entity("Domain.Entities.BookingMethod", b =>
                {
                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("BookingMethods")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");
                });

            modelBuilder.Entity("Domain.Entities.Court", b =>
                {
                    b.HasOne("Domain.Entities.User", "Creator")
                        .WithMany("CreatedCourts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("Employees")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Court");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("Schedules")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");
                });

            modelBuilder.Entity("Domain.Entities.Slot", b =>
                {
                    b.HasOne("Domain.Entities.Schedule", "Schedule")
                        .WithMany("Slots")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.User", "Creator")
                        .WithMany("Transactions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.TransactionDetail", b =>
                {
                    b.HasOne("Domain.Entities.Transaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Domain.Entities.BookingMethod", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.Court", b =>
                {
                    b.Navigation("BookingMethods");

                    b.Navigation("Bookings");

                    b.Navigation("Employees");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Domain.Entities.TransactionDetail", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CreatedCourts");

                    b.Navigation("Employees");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
